package com.sicsr.programme.database.dao.impl;

import android.database.Cursor;
import biz.cytrus.lightbulb.database.entity.UserClassEntity;
import biz.cytrus.lightbulb.util.LightbulbUtil;

import com.sicsr.programme.activity.BaseActivity;
import com.sicsr.programme.database.DbOperationResponse;
import com.sicsr.programme.database.dao.BranchDao;
import com.sicsr.programme.entity.BranchEntity;

public class BranchDaoImpl extends BranchDao {

	public BranchDaoImpl(BaseActivity initActivity) {
		super(initActivity);
		// TODO Auto-generated constructor stub
	}

	@Override
	public DbOperationResponse add(BranchEntity entity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DbOperationResponse remove(Long entityId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DbOperationResponse update(Long entityId, BranchEntity updatedEntity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DbOperationResponse exists(Long entityId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DbOperationResponse findMaxId() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DbOperationResponse findById(Long entityId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DbOperationResponse findBranches() {
		DbOperationResponse dbResponse = new DbOperationResponse();

		try {

			StringBuilder sqlBuilder = new StringBuilder();

			sqlBuilder.append("SELECT user_classes.class_id class_id, ");
			sqlBuilder.append("classes.description as class_name, ");
			sqlBuilder.append("(SELECT COUNT(*) ");
			sqlBuilder.append("FROM class_content_items ");
			sqlBuilder.append("WHERE class_content_items.class_id = user_classes.class_id) AS total, ");
			sqlBuilder.append("(SELECT COUNT(*) ");
			sqlBuilder.append("FROM user_content_items ");
			sqlBuilder.append("WHERE user_content_items.content_item_id IN ");
			sqlBuilder.append("(SELECT content_item_id ");
			sqlBuilder.append("FROM class_content_items ");
			sqlBuilder.append("WHERE class_content_items.class_id = user_classes.class_id ) ");
			sqlBuilder.append("AND user_content_items.user_id = user_classes.user_id ");
			sqlBuilder.append("AND user_content_items.status = 0) AS new ");
			sqlBuilder.append("FROM " + UserClassEntity.Table.USER_CLASS.getValue() + " ");
			sqlBuilder.append("JOIN classes ON user_classes.class_id = classes.id ");
			sqlBuilder.append("WHERE user_id = " + userId);

			LightbulbUtil.log(getInitActivity(), LightbulbUtil.LOG_TYPE_DEBUG, "findDashboardClassesByUserId", sqlBuilder.toString());

			Cursor cursor = getDbAdapter().getDatabase().rawQuery(sqlBuilder.toString(), null);

			LightbulbUtil.log(getInitActivity(), LightbulbUtil.LOG_TYPE_DEBUG, "findByUserAndClass", "Rows returned: " + Integer.toString(cursor != null ? cursor.getCount() : -1));

			dbResponse.setFetchedData(cursor);

			if (dbResponse.getFetchedData() != null && dbResponse.getFetchedData().getCount() > 0) {
				dbResponse.getMessages().add("User Class items retrieved");
				dbResponse.setStatus(true);
			} else {
				dbResponse.getErrors().add("No User Class items found in the database");
				dbResponse.setStatus(false);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return dbResponse;
	}

}
