package com.sicsr.programme.activity;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.content.res.Resources.NotFoundException;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.appcompat.R;
import android.util.Base64;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

import com.sicsr.programme.BaseFrameworkApplication;


/**
 * @author Faiyyaz Shaikh
 *
 */
public abstract class BaseActivity extends ActionBarActivity{

	protected final String TAG = this.getClass().getSimpleName();

	private ProgressDialog mProgressDialog;
	private Dialog mErrorDialog;
	private Dialog mExitDialog;

	private RESTResponder mRESTResponder;
	private FragmentManager mFragmentManager;
	private FragmentTransaction mFragmentTransaction;

	private Boolean mExitDialogShowing = false;
	private UserDto mLoggedInUser;
	/*private DashboardClassDto mSelectedClass;*/

	private boolean requiresLogin = true;
	public static final String PREFERENCES = "BaseFrameworkPreferences";
	SharedPreferences mSettings;
	SharedPreferences.Editor mEditor;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setupRESTResponder();
		mSettings = getSharedPreferences(PREFERENCES, MODE_PRIVATE);
		performLoginCheck();
	}

	public void performLoginCheck() {

		Utils.log(this, Utils.LOG_TYPE_DEBUG, TAG, "RequiresLogin? : " + String.valueOf(requiresLogin) + ", isUserLoggedIn()? : " + userIsLoggedIn());

		if (requiresLogin && !userIsLoggedIn()) {
			startActivity(new Intent(BaseActivity.this, LoginActivity.class));
			BaseActivity.this.finish();
		} else {
			onLoginVerified();
		}
	}


	public void setupRESTResponder() {
		mFragmentManager = getSupportFragmentManager();
		mFragmentTransaction = mFragmentManager.beginTransaction();

		mRESTResponder = (RESTResponder) mFragmentManager.findFragmentByTag("RESTResponder");

		if (mRESTResponder == null) {
			mRESTResponder = new RESTResponder();

			mFragmentTransaction.add(mRESTResponder, "RESTResponder");
		}

		mFragmentTransaction.commit();
	}

	public RESTResponder getRESTResponder() {
		return mRESTResponder;
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (mExitDialogShowing) {
			showExitDialog();
		}
	}


	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		outState.putBoolean("mExitDialogShowing", mExitDialogShowing);
	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState) {
		super.onRestoreInstanceState(savedInstanceState);
		mExitDialogShowing = savedInstanceState.getBoolean("mExitDialogShowing");
	}

	@Override
	public void onBackPressed() {
		if (this instanceof HomeActivity) {
			showExitDialog();
		} else {
			super.onBackPressed();
		}
	}


	@Override
	protected void onDestroy() {

		if (mProgressDialog != null) {
			mProgressDialog.dismiss();
		}

		if (mExitDialog != null) {
			mExitDialog.dismiss();
		}

		super.onDestroy();
	}


	public void savePreference(String key, Object value) {
		mEditor = mSettings.edit();

		String savedValue = null;

		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		ObjectOutput out = null;

		try {
			out = new ObjectOutputStream(bos);
			out.writeObject(value);

			savedValue = Base64.encodeToString(bos.toByteArray(), Base64.DEFAULT);

		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				out.close();
				bos.close();
			} catch (Exception ex) {
			}
		}

		if (savedValue != null) {
			mEditor.putString(key, savedValue);
			mEditor.commit();
		}
	}

	public void removePreference(String key) {
		mEditor = mSettings.edit();
		mEditor.remove(key);
		mEditor.commit();
	}

	public BaseFrameworkApplication getBaseFrameworkApplication() {
		return (BaseFrameworkApplication) getApplication();
	}

	public void lockOrientation() {
		if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
		} else {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
		}
	}

	public void releaseOrientation() {
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
	}


	/*
	 * The database should be opened upon first app launch. In the unlikely case
	 * that it is not or the database does not exist anymore (user cleared data)
	 * we need to open it.
	 */
	public void initializeDb() {
		BaseFrameworkApplication baseframeworkApplication = getBaseFrameworkApplication();

		if (baseframeworkApplication.getDbAdapter() == null) {
			baseframeworkApplication.initDb();
		}
	}


	public void showProgressDialog(String message) {
		dismissProgressDialog();
		mProgressDialog = ProgressDialog.show(BaseActivity.this, "", message);
	}

	public void updateProgressDialog(String message) {
		if (mProgressDialog != null) {
			mProgressDialog.setMessage(message);
		}
	}

	public void dismissProgressDialog() {
		if (mProgressDialog != null) {
			mProgressDialog.dismiss();
		}

		mProgressDialog = null;
	}

	public abstract void setupUi();
	public abstract void loadContent();
	 

}
